.program spdif_subframe_decode

; Assumes line is idle low
; One bit is ~20 cycles. In each bit period:
; - A '0' is encoded as a transition at time 0
; - A '1' is encoded as a transition at time 0 and a transition at time T/2 (10 cycles)
;
; The IN mapping and the JMP pin select must both be mapped to the GPIO used for
; RX data. Autopush must be enabled.

public start:
    ;jmp pin preamble_low ; too much instructions

.wrap_target
preamble_high:
    wait 1 pin 0
    set y, 12
preamble_high_test:
    jmp pin preamble_high_next  ; must be 1 for 30 cycles
    jmp preamble_high
preamble_high_next:
    jmp y-- preamble_high_test
    set y, 28 [8]
    jmp pin preamble_low    [9]  ; must be 0

preamble_end:
    in pins, 1              [9]  ; a
    in pins, 1              [9]  ; b
    in pins, 1              [9]  ; c
    in pins, 1              [0]  ; must be 0 for high preamble (1110abc0), 1 for low preamble (0001abc1)
    jmp pin initial_low          ; must be 0
    jmp initial_high

preamble_low:
    wait 0 pin 0
    set y, 12
preamble_low_test:
    jmp pin preamble_low         ; must be 0 for 30 cycles
    jmp y-- preamble_low_test
    set y, 28 [8]
    jmp pin preamble_end    [9]  ; must be 1
.wrap

initial_high:                    ; Find rising edge at start of bit period
    jmp y-- initial_high_1
    jmp start
initial_high_1:
    wait 1 pin, 0           [12] ; Delay to eye of second half-period (i.e 3/4 of way
    jmp pin high_0               ; through bit) and branch on RX pin high/low.
high_1:
    in x, 1                      ; Second transition detected (a `1` data symbol)
    jmp initial_high
high_0:
    in null, 1                   ; Line still high, no centre transition (data is `0`)
    ; Fall-through

initial_low:                     ; Find falling edge at start of bit period
    jmp y-- initial_low_1
    jmp start
initial_low_1:
    wait 0 pin, 0           [12] ; Delay to eye of second half-period
    in pins, 1
    jmp pin initial_low
    jmp initial_high

% c-sdk {
static inline void spdif_subframe_decode_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);

    pio_sm_config c = spdif_subframe_decode_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin); // for WAIT
    sm_config_set_jmp_pin(&c, pin); // for JMP
    sm_config_set_in_shift(&c, true, true, 32); // LSB
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);

    // X is set to 1, to conveniently emit it to ISR/FIFO.
    pio_sm_exec(pio, sm, pio_encode_set(pio_x, 0xFFFFFFFF));
    pio_sm_set_enabled(pio, sm, true);
}
%}